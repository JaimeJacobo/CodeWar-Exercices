

INSTRUCTIOS:

In this kata, you must create a digital root function.

A digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has two digits, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.

Here's how it works:

digital_root(16)
=> 1 + 6
=> 7

digital_root(942)
=> 9 + 4 + 2
=> 15 ...
=> 1 + 5
=> 6

digital_root(132189)
=> 1 + 3 + 2 + 1 + 8 + 9
=> 24 ...
=> 2 + 4
=> 6

digital_root(493193)
=> 4 + 9 + 3 + 1 + 9 + 3
=> 29 ...
=> 2 + 9
=> 11 ...
=> 1 + 1
=> 2








MY SOLUTION:

let digital_root = ((numberInt)=>{
  comparativeArray = [];
  numberInt = numberInt.toString();
  let comparativeCount = 0;
  let otherComparativeCount = 0;
  for(let i = 0; i < numberInt.length; i++){
    comparativeArray.push(numberInt[i]);
  };
   for(let i = 0; i < comparativeArray.length; i++){
    comparativeCount += Number(comparativeArray[i]);
  };
  comparativeCount = comparativeCount.toString();
  let sumThem = (()=>{
    for(let i = 0; i < comparativeCount.length; i++){
      otherComparativeCount += Number(comparativeCount[i]);
    };
    comparativeCount = otherComparativeCount.toString();
    otherComparativeCount = 0;
  });
  while(comparativeCount.length > 1){
    sumThem();
  };
  return Number(comparativeCount);
});
