INSTRUCTIONS:


Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.

For example:

 persistence(39) === 3 // because 3*9 = 27, 2*7 = 14, 1*4=4
                       // and 4 has only one digit

 persistence(999) === 4 // because 9*9*9 = 729, 7*2*9 = 126,
                        // 1*2*6 = 12, and finally 1*2 = 2

 persistence(4) === 0 // because 4 is already a one-digit number










MY SOLUTION:



let persistence = ((numberInt)=>{
  comparativeArray = [];
  numberInt = numberInt.toString();
  let comparativeCount = 1;
  let otherComparativeCount = 1;
  let returnedCount = 1;
  for(let i = 0; i < numberInt.length; i++){
    comparativeArray.push(numberInt[i]);
  };
   for(let i = 0; i < comparativeArray.length; i++){
    comparativeCount *= Number(comparativeArray[i]);
  };
  comparativeCount = comparativeCount.toString();
  let sumThem = (()=>{
    for(let i = 0; i < comparativeCount.length; i++){
      otherComparativeCount *= Number(comparativeCount[i]);
    };
    comparativeCount = otherComparativeCount.toString();
    otherComparativeCount = 1;
  });
  while(comparativeCount.length > 1){
    sumThem();
    returnedCount ++;
  };
  if(numberInt.toString().length == 1){
    return 0;
  } else {
    return returnedCount;
  };
});
